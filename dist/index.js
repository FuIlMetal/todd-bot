"use strict";var j=Object.create;var x=Object.defineProperty;var H=Object.getOwnPropertyDescriptor;var $=Object.getOwnPropertyNames;var J=Object.getPrototypeOf,W=Object.prototype.hasOwnProperty;var X=(t,r)=>{for(var o in r)x(t,o,{get:r[o],enumerable:!0})},Q=(t,r,o,i)=>{if(r&&typeof r=="object"||typeof r=="function")for(let n of $(r))!W.call(t,n)&&n!==o&&x(t,n,{get:()=>r[n],enumerable:!(i=H(r,n))||i.enumerable});return t};var A=(t,r,o)=>(o=t!=null?j(J(t)):{},Q(r||!t||!t.__esModule?x(o,"default",{value:t,enumerable:!0}):o,t));var a=require("discord.js");var R={};X(R,{data:()=>ie,execute:()=>D});var V=require("discord.js");var b=A(require("dotenv")),O=require("@fightmegg/riot-api");b.default.config();var{DISCORD_TOKEN:k,DISCORD_CLIENT_ID:P,GUILD_ID:M,SUPABASE_URL:K,RIOT_KEY:Z,CHANNEL_ID:L}=process.env,ee={debug:!1},te=new O.RiotAPI(String(Z),ee);if(!k||!P||!M||!K||!L)throw new Error("Missing environment variables");var m={DISCORD_TOKEN:k,DISCORD_CLIENT_ID:P,GUILD_ID:M,SUPABASE_URL:K,rAPI:te,CHANNEL_ID:L};var w=require("@fightmegg/riot-api");var ye=require("dotenv/config"),U=require("drizzle-orm/postgres-js"),B=A(require("postgres")),oe=process.env.SUPABASE_URL,ne=(0,B.default)(oe),g=(0,U.drizzle)(ne);var e=require("drizzle-orm/pg-core"),I=require("drizzle-orm"),Ie=(0,e.pgEnum)("aal_level",["aal1","aal2","aal3"]),we=(0,e.pgEnum)("code_challenge_method",["s256","plain"]),Ce=(0,e.pgEnum)("factor_status",["unverified","verified"]),Te=(0,e.pgEnum)("factor_type",["totp","webauthn"]),ve=(0,e.pgEnum)("one_time_token_type",["confirmation_token","reauthentication_token","recovery_token","email_change_token_new","email_change_token_current","phone_change_token"]),xe=(0,e.pgEnum)("key_status",["default","valid","invalid","expired"]),Ee=(0,e.pgEnum)("key_type",["aead-ietf","aead-det","hmacsha512","hmacsha256","auth","shorthash","generichash","kdf","secretbox","secretstream","stream_xchacha20"]),De=(0,e.pgEnum)("action",["INSERT","UPDATE","DELETE","TRUNCATE","ERROR"]),Re=(0,e.pgEnum)("equality_op",["eq","neq","lt","lte","gt","gte","in"]),Se=(0,e.pgTable)("accounts",{id:(0,e.serial)("id").primaryKey().notNull(),riot_puuid:(0,e.char)("riot_puuid",{length:78}).notNull(),player_id:(0,e.integer)("player_id").notNull().references(()=>E.id),is_primary:(0,e.boolean)("is_primary").notNull()}),c=(0,e.pgTable)("divisions",{id:(0,e.serial)("id").primaryKey().notNull(),name:(0,e.varchar)("name",{length:20}),description:(0,e.text)("description"),provider_id:(0,e.integer)("provider_id").notNull(),tournament_id:(0,e.integer)("tournament_id").notNull(),groups:(0,e.integer)("groups")},t=>({lower_idx:(0,e.index)("divisions_lower_idx").using("btree",I.sql`lower((name)::text)`)})),Ae=(0,e.pgTable)("performances",{id:(0,e.serial)("id").primaryKey().notNull(),player_id:(0,e.integer)("player_id").references(()=>E.id),team_id:(0,e.integer)("team_id").references(()=>l.id),game_id:(0,e.integer)("game_id").references(()=>_.id)}),E=(0,e.pgTable)("players",{id:(0,e.serial)("id").primaryKey().notNull(),primary_riot_puuid:(0,e.char)("primary_riot_puuid",{length:78}).notNull(),team_id:(0,e.integer)("team_id").references(()=>l.id)}),be=(0,e.pgTable)("schedules",{id:(0,e.serial)("id").primaryKey().notNull(),week:(0,e.integer)("week").notNull(),division_id:(0,e.integer)("division_id").notNull().references(()=>c.id),group_id:(0,e.char)("group_id",{length:1}).notNull(),series_id:(0,e.integer)("series_id").notNull().references(()=>p.id)}),re=(0,e.pgTable)("results",{id:(0,e.serial)("id").primaryKey().notNull(),start_time:(0,e.bigint)("start_time",{mode:"number"}),short_code:(0,e.varchar)("short_code",{length:100}).notNull(),meta_data:(0,e.text)("meta_data").notNull(),game_id:(0,e.integer)("game_id"),game_name:(0,e.varchar)("game_name",{length:60}),game_type:(0,e.varchar)("game_type",{length:20}),game_map:(0,e.varchar)("game_map",{length:20}),game_mode:(0,e.varchar)("game_mode",{length:20}),region:(0,e.varchar)("region",{length:20})}),p=(0,e.pgTable)("series",{id:(0,e.serial)("id").primaryKey().notNull(),team1_id:(0,e.integer)("team1_id").notNull().references(()=>l.id),team2_id:(0,e.integer)("team2_id").notNull().references(()=>l.id),message_id:(0,e.bigint)("message_id",{mode:"number"}),playoffs:(0,e.boolean)("playoffs").notNull(),win_condition:(0,e.integer)("win_condition").notNull()}),_=(0,e.pgTable)("games",{id:(0,e.serial)("id").primaryKey().notNull(),short_code:(0,e.varchar)("short_code",{length:100}).notNull(),winner_id:(0,e.integer)("winner_id").references(()=>l.id),loser_id:(0,e.integer)("loser_id").references(()=>l.id),series_id:(0,e.integer)("series_id").notNull().references(()=>p.id),result_id:(0,e.integer)("result_id").references(()=>re.id),game_num:(0,e.integer)("game_num").default(0).notNull()}),Oe=(0,e.pgTable)("standings",{id:(0,e.serial)("id").primaryKey().notNull(),placement:(0,e.integer)("placement").notNull(),division_id:(0,e.integer)("division_id").notNull(),group_id:(0,e.char)("group_id",{length:1}).notNull(),team_id:(0,e.integer)("team_id").notNull().references(()=>l.id)}),l=(0,e.pgTable)("teams",{id:(0,e.serial)("id").primaryKey().notNull(),name:(0,e.varchar)("name",{length:255}).notNull(),division_id:(0,e.integer)("division_id").notNull().references(()=>c.id),group_id:(0,e.char)("group_id",{length:1}).notNull(),captain_id:(0,e.integer)("captain_id").references(()=>E.id),logo:(0,e.varchar)("logo")},t=>({lower_idx:(0,e.index)("teams_lower_idx").using("btree",I.sql`lower((name)::text)`)})),ke=(0,e.pgTable)("group_keys",{id:(0,e.smallint)("id").primaryKey().notNull(),letter:(0,e.char)("letter",{length:1})},t=>({lower_idx:(0,e.index)("group_keys_lower_idx").using("btree",I.sql`lower((letter)::text)`)}));var f=require("drizzle-orm"),y=require("drizzle-orm"),ie=new V.SlashCommandBuilder().setName("generate-tournament-code").setDescription("Generate Tournament Code");async function G(t){return(await g.select().from(l).where(f.sql`lower(${l.name}) = lower(${t})`))[0]}async function ae(t,r){let o="",i=await G(t),n=await G(r);return i==null?(o="Are you sure "+t+" is a real team?",{data:{team1:null,team2:null,error:o}}):n==null?(o="Are you sure "+r+" is a real team?",{data:{team1:null,team2:null,error:o}}):i.id==n.id?(o="Yeah I'm not really sure what to tell you chief. You're not better than yourself",{data:{team1:null,team2:null,error:o}}):i.division_id==n.division_id&&i.group_id==n.group_id?{data:{team1:i,team2:n,error:o}}:(o="Silly Goose, these teams can't play against each other!",{data:{team1:null,team2:null,error:o}})}async function se(t,r){let{first:o,second:i}=t.id>r.id?{first:t.id,second:r.id}:{first:r.id,second:t.id};return await g.select({seriesId:p.id}).from(p).where((0,f.and)((0,y.eq)(p.team1_id,o),(0,y.eq)(p.team2_id,i)))}async function D(t,r){let o="",i="",n=1,d=0,u="",s=await ae(t,r);if(s?.data.error!="")return o=s?.data.error,{tournamentCode1:i,game_number:n,error:o,division:d,group:u};let F=(await g.select({providerId:c.provider_id,tournamentId:c.tournament_id}).from(c).where((0,y.eq)(c.id,s.data.team1.division_id)))[0].tournamentId,S=await se(s.data.team1,s.data.team2);if(S[0]==null)return o="There is no series for those two teams.",{tournamentCode1:i,game_number:n,error:o,division:d,group:u};let T=S[0].seriesId,v=await g.select({gameNum:_.game_num}).from(_).where((0,y.eq)(_.series_id,T)).orderBy((0,f.desc)(_.game_num));if(v!=null&&v[0]!=null&&(n=v[0].gameNum+1),n>10)return o="We do not allow more than 10 codes for a single series. Please make a ticket if you are having issues with your tournament codes.",{tournamentCode1:i,game_number:n,error:o,division:d,group:u};let z=JSON.stringify({game_num:n,series_id:T});return i=(await m.rAPI.tournamentStubV5.createCodes({params:{count:1,tournamentId:F},body:{teamSize:5,pickType:w.RiotAPITypes.TournamentV5.PICKTYPE.TOURNAMENT_DRAFT,mapType:w.RiotAPITypes.TournamentV5.MAPTYPE.SUMMONERS_RIFT,spectatorType:w.RiotAPITypes.TournamentV5.SPECTATORTYPE.ALL,enoughPlayers:!1,metadata:z}}))[0],await g.insert(_).values({short_code:i[0],series_id:T,game_num:n}),d=s.data.team1.division_id,u=s.data.team1.group_id,{tournamentCode1:i,game_number:n,error:o,division:d,group:u}}var C={tournament:R};var h=require("discord.js");var de=Object.values(C).map(t=>t.data),Y=new h.REST({version:"10"}).setToken(m.DISCORD_TOKEN);async function q({guildId:t}){try{console.log("Started refreshing application (/) commands."),await Y.put(h.Routes.applicationGuildCommands(m.DISCORD_CLIENT_ID,t),{body:[]}).then(()=>console.log("Successfully deleted all guild commands.")).catch(console.error),await Y.put(h.Routes.applicationCommands(m.DISCORD_CLIENT_ID),{body:de}),console.log("Successfully reloaded application (/) commands.")}catch(r){console.error(r)}}var N=new a.Client({intents:["Guilds","GuildMessages","DirectMessages"]}),Ze=Object.values(C).map(t=>t.data),et=new a.REST({version:"10"}).setToken(m.DISCORD_TOKEN),tt=process.env.DISCORD_TOKEN,ot=process.env.PROVIDER_ID,le=process.env.GUILD_ID,nt=process.env.TOURNAMENT_ID,rt=process.env.TOURNAMENT_CODE_ENDPOIN,me=process.env.CHANNEL_ID;N.once("ready",async()=>{console.log("Discord bot is ready! \u{1F916}"),await q({guildId:le})});N.on("guildCreate",async t=>{console.log("deploy commands please")});N.on(a.Events.InteractionCreate,async t=>{if(t.isChatInputCommand())if(t.commandName=="generate-tournament-code"&&t.channelId==me){let r=new a.ModalBuilder().setCustomId("generate-tournament-code").setTitle("Tournament Codes"),o=new a.TextInputBuilder().setCustomId("team1").setLabel("First team input").setStyle(a.TextInputStyle.Short),i=new a.TextInputBuilder().setCustomId("team2").setLabel("Second team input").setStyle(a.TextInputStyle.Short),n=new a.ActionRowBuilder().addComponents(o),d=new a.ActionRowBuilder().addComponents(i);r.addComponents(n,d),await t.showModal(r)}else t.reply({content:"Please do not use this command in this way <3",ephemeral:!0})});N.on(a.Events.InteractionCreate,async t=>{if(!t.isModalSubmit())return;let r=t.fields.getTextInputValue("team1"),o=t.fields.getTextInputValue("team2"),i=new Map;i.set(1,"ECONOMY"),i.set(2,"COMMERCIAL"),i.set(3,"FINANCIAL"),i.set(4,"EXECUTIVE");var n;try{n=await D(r,o)}catch{t.reply({content:"Error, contact ruuffian.",ephemeral:!0});return}if(n?.error!="")t.reply({content:n?.error,ephemeral:!0});else{let d=i.get(n?.division),u=n?.group,s="## "+d+" - Group "+u+"\n**`_"+r+"_`** vs **`_"+o+"_`**\nGame "+n?.game_number+" Code: ```"+n?.tournamentCode1+"```";n?.game_number>5&&(s=s.concat(`
You are above the needed codes for your series. If you are experiencing issues, please open an admit ticket. <@247886805821685761>`)),t.reply({content:s})}});N.login(m.DISCORD_TOKEN);
